#############################################################
### R Statistical Package Tutorial
### Daljeet Virdi
#############################################################

# Load a CSV file into R
# The file path can be retrieved by dragging the file into the R console
Intel <- read.csv("~/Downloads/table.csv", header=TRUE)
Intel <- read.table("~/Downloads/table.csv", header=TRUE, sep=",")

# Look at the data
Intel;
summary(Intel)
str(Intel)
dim(Intel)						# Dimension of the data
length(Intel) 
ncol(Intel)						# Number of columns
# Other
head(Intel);	tail(Intel);
names(Intel)					# Names of columns, if header=TRUE

#Rows and columns are called in [r,c] format
Intel[1:5,]
Intel[,5:6]
Intel[1:5,1:2]
# The $ sign calls a column in the data set
Intel$High;	Intel[,3];
max(Intel$High)

# Other simple functions
ls()						# Lists the data or objects in memory
x <- c(1,2,3)				# Create a vector called 'x' with numbers 1,2,3
?matrix						# Opens help menu for the function, "matrix"
range(Intel$Volume)
mean(Intel$Open)
median(Intel$Close)
sd(Intel$Open);		sqrt(var(Intel$Open));
mad(Intel$Open)
cor(Intel$Low, Intel$Volume)
regression = lm(Intel$Open ~ Intel$High)		# Linear regression
summary(regression)
coefficients(regression)

##### Probabilities & Distributions
# CDF at x = 0 for a random variable X~N(0,1)
pnorm(0,mean = 0, sd = 1)			# i.e. Probability(X < x) 
# CDF at x = -0.7 for a student's t with 6 df
pt(-0.7, df = 6)
# PDF for x = 3 for a random variable X~N(5,2)
dnorm(3, mean = 5, sd = 2)
# Random number generator -- 999 numbers from distribution X~N(0,1)
rnorm(999, 0, 1)
# Confidence interval cutoffs -- quantile function
qnorm(0.95)					# One-sided 95% confidence; default X~N(0,1)
qnorm(0.975, 25, 2)			# One-sided 97.5% confidence; X~N(25,2)

# Histograms
par(bg="aliceblue")
hist(Intel$Close,breaks=80, main="Intel's Monthly Closing Prices",
		xlab="Price", col="tan", border="gray", 
		xlim=c(0, quantile(Intel$Close,	9/10)))
# Adding verticle lines & text		
abline(v=median(Intel$Close),lwd=1.5,lty=3,col="red4")
text(median(Intel$Close),0,"Median",col="cyan3",pos=4)
abline(v=mean(Intel$Close),lwd=1.5,lty=2,col="purple2")
text(mean(Intel$Close),0,"Mean",col="cyan2",pos=4)

graphics.off()				# graphics.off() closes the plot window
# Place the curser in the row, hold command and hit enter (Mac users)

# Creating time series data
tsp <- ts(data=rev(Intel$Adj),frequency=12,start=c(1990,10))
plot(tsp,main="Intel Monthly Stock Prices", ylab="Price")
graphics.off()
# The CSV file lists the latest price first, and the ts() function matched the start month with the most recent price
# rev() reverses the order of Intel$Adj

# The data set was already a time series, so simply use plot()
plot(Intel$Date,Intel$Adj,main="Intel Monthly Stock Prices", xlab="Time", ylab="Price ($)", type="l")
lines(Intel$Date,Intel$Adj,col="violet",lwd=3/2)
graphics.off()				# plot() & plot.default() return scatters

# Calculating stock returns using functions
# diff(log()) is used to approximate percentage increases/decreases
# install.packages("quantmod")
library(quantmod)
intelReturns <- Delt(Intel$Adj,type="arithmetic")
intelRets <- diff(log(Intel$Adj))

# Notice the Delt() method leaves an NA entry in the first row. This needs to be deleted
intelReturns = intelReturns[-1,]				# Or use...
intelReturns = intelReturns[!is.na(intelReturns)]

# Holding period return formula
t = nrow(Intel)
# intelR = Intel$Adj[1:t-1]/Intel$Adj[2:t] - 1
intelR = Intel$Adj[2:t]/Intel$Adj[1:t-1] - 1
# Compare the methods graphically
par(mfrow=c(3,1))
plot(density(intelReturns),main="Delt() Function")
plot(density(intelR),main="Holding Period Return Formula")
plot(density(intelRets),main="Difference of Logs")
graphics.off()

par(mfrow=c(2,2))			# Compare returns
plot(rev(intelReturns) ~ Intel$Date[-nrow(Intel)], xlab="Time", ylab="Monthly Returns", type="l")
title(main="Delt() Function returns", font.main=3)
lines(Intel$Date[-nrow(Intel)], rev(intelReturns),col="tan", lwd=3/2)

plot(rev(intelRets) ~ Intel$Date[-nrow(Intel)], xlab="Time", ylab="Monthly Returns", type="l")
title(main="Difference of Logs", font.main=6)
lines(Intel$Date[-nrow(Intel)], rev(intelRets),col="green2", lwd=3/2)

hist(intelReturns,breaks=50,main="Delt() Function returns",
		xlab="Intel Stock Returns",col="skyblue")
hist(intelRets,breaks=50,main="Difference of Logs",
		xlab="Intel Stock Returns",col="gray")
graphics.off()

plot(ts(rev(intelReturns), frequency = 12, start=c(1990,10), 
		end=c(2013,10)), main="Comparison of Return Computation", 					ylab="Returns", lwd=3/2, lty=3, col="navyblue")
lines(ts(rev(intelRets), frequency = 12, start=c(1990,10), end=c(2013,10)), 		lwd=3/2, lty=1, col="yellow")
legend("topright", legend=c("Delt() Function", "Difference of Logs"), 
		lty=c(3,1), lwd=c(2,2), col=c("darkblue","yellow"), cex=0.8)		
# Adding a legend
graphics.off()
# There is also plot.ts() and as.ts() I chose not to use here

# A normal curve with sample mean and stdev
support = seq(-0.5,0.5,length=1000)
ncurve = dnorm(support,mean=mean(intelRets),sd=sd(intelRets))
# A normal curve with sample median and mad
ncurve1 = dnorm(support,mean=median(intelRets),sd=mad(intelRets))

plot(density(intelRets,adjust=3/2), xlim=c(-0.5,0.5), col="purple", lwd=2,				main="Sample PDF of Intel Returns", xlab="Returns",
			ylim=c(0,max(ncurve,ncurve1,intelRets)));
lines(support,ncurve,lty=3,lwd=2,col="darkgreen")
lines(support,ncurve1,lty=3,lwd=2,col="lightblue")
legend("topright", legend=c("Sample Distribution", "Normal w/ mean & sd", "Normal w/ median & mad"), lty=c(1,3,3), lwd=c(2,2,2), col=c("purple","darkgreen","lightblue"), cex=0.85)
graphics.off()

# Testing Normality
qqnorm(intelRets, datax=TRUE, ylab="Data",
	   main="QQ Plot")
qqline(intelRets,datax=TRUE, col="red", lwd=2)
abline(v=mean(intelRets), col="darkblue")
text(0.05,-3,"Mean", col="darkblue", pos=3)
graphics.off()

###########################################################################

# Using quantmod to get stock quotes
library(quantmod)

# Using quantmod to get stock quotes
# You need to know the stock ticker symbol, and getSymbols will pull the data from Yahoo! Finance
getSymbols("SPY", from="1995-01-01", to="2012-12-31")
getSymbols("INTC", from="1995-01-01", to="2012-12-31")

# Copying the SPY.Adj column from the data set SPY and naming the vector SPYp
names(SPY)
SPYp = SPY$SPY.Adj
INTCp = INTC$INTC.Adj
plot.default(SPYp,INTCp)
abline(lsfit(SPYp,INTCp), col="blue", lwd=2)
graphics.off()

# Subsets
SPY['2010-01::2012-12']				# Jan 2010 through Dec 2012
INTC['2009::']						# From 2009 on
SPY09 = SPY['2009']					# Creating a subset for 2009
INTC09 = INTC['2009']


plot.default(SPY09$SPY.Adj, INTC09$INTC.Adj, 
				main = "Price Comparison,\n2009", xlab="SPDR ETF Prices", 					ylab="Intel Stock Prices", pch=19,)
abline(lsfit(SPY09$SPY.Adj,INTC09$INTC.Adj), col="magenta",lwd=2)

graphics.off()

# Summary of linear regression
summary(lm(SPY09$SPY.Adj ~ INTC09$INTC.Adj))
plot(lm(SPY09$SPY.Adj ~ INTC09$INTC.Adj))	

# Grab more data with 1 getSymbols() statement
getSymbols(c("SBUX", "GS", "JPM", "GE", "KO", "PM", "WFC", "QQQ", "TM", "SPY"), from="2010-01-01", to="2013-6-30")

# Compare Goldman Sachs and JP Morgan
# The Ad() function allows you to isolate a column
# There are also functions Op(), Cl(), Hi(), Lo(), Vo()
# for the open, close, high, low, and volume
par(bg="bisque2")
plot.default(Ad(GS), Ad(JPM), ylab="JP Morgan", xlab="Goldman Sachs", main="Adjusted Closing Prices", pch=17, col="blue4")
abline(lsfit(Ad(GS), Ad(JPM)), col="yellow", lwd=5/2)
graphics.off()

chartSeries(QQQ,subset='last 1 year')		# Stock charts
chartSeries(SPY,subset='last 6 months')
chartSeries(last(PM,"10 weeks"))
chartSeries(last(JPM,20))
# quantmod has many built in functions for analysis
addCMF()			# Chaiken Money Flow
addSMA()			# simple moving average
addBBands()			# Bollinger Bands
addMACD()			# Moving Average Convergence Divergence
addRSI()			# Relative Strength Indicator

graphics.off()

multi = lm(SPY$SPY.Adj ~ JPM$JPM.Adj + GS$GS.Adj)	# Multivariate regression
summary(multi)

# install.packages('scatterplot3d')					# 3D plots
library(scatterplot3d)
graph <- scatterplot3d(Ad(JPM), Ad(GS), Ad(SPY), 
			highlight.3d=TRUE ,angle=50,,pch=20,col.grid="darkblue",
			xlab="JP Morgan", ylab="Goldman Sachs", zlab="S&P 500 ETF",
			main="January 2010 - June 2013 Daily Prices")
graph$plane3d(multi, col="orange")
graphics.off()

# Fancier plots using layout()
getFX(c('EUR/USD', 'GBP/USD'), from="2013-01-01")
m = rbind(c(1,1), c(2,3))
layout(m)
layout.show(3)
plot.default(GBPUSD, EURUSD, pch=19, col="aquamarine4", xlab="Pound per Dollar", ylab="Euro per Dollar", main="FOREX Scatter Plot")
abline(lm(EURUSD ~ GBPUSD), lwd=5/2, col="orange");
plot(EURUSD, main="EURO / $"); 	plot(GBPUSD, main="GB Pound / $");

# Calculating weekly returns with quantmod functions
Tr = weeklyReturn(Ad(TM)); Gr = weeklyReturn(Ad(GE)); Wr = weeklyReturn(Ad(WFC)); Pr = weeklyReturn(Ad(PM)); Qr = weeklyReturn(Ad(QQQ)); Kr = weeklyReturn(Ad(KO)); Sr = weeklyReturn(Ad(SBUX)); SPr = weeklyReturn(Ad(SPY));

plot(as.ts(SPr['2012::']), ylab="Returns", xlab="Trading Days", lwd=1.5,col="darkblue")
title(main="Weekly Stock Returns \nJan 2012 through Jun 2013")
lines(as.ts(Kr['2012::']),lwd=1.5,col="orange")
legend("bottom", legend=c("S&P 500", "Coca Cola"), lty=c(1,1), lwd=c(2,2), col=c("darkblue","orange"))			# Time series
graphics.off()

# Creating a JPEG file 8.5" x 11"
jpeg('TM GS WFC PM historical dist.jpg', width=1056, height=816)
par(mfrow=c(2,2))
plot(density(Tr),main="Toyota")
abline(v=mean(Tr), col="purple")
plot(density(Gr),main="Goldman Sachs")
abline(v=mean(Gr), col="purple")
plot(density(Wr),main="Wells Fargo")
abline(v=mean(Wr), col="purple")
plot(density(Pr),main="Phillip Morris")
abline(v=mean(Pr), col="purple")
dev.off()

pdf(file="QQQ, KO, SB, SPDR densities.pdf", height=8, width=10)
par(mfrow=c(2,2))
plot(density(Qr), main="PowerShares QQQ Trust, \nSeries 1 ETF", xlab="Weekly Returns")
abline(v=mean(Pr), col="orange")
plot(density(Kr), main="Coca Cola", xlab="Weekly Returns")
abline(v=mean(Kr), col="orange")
plot(density(Sr), main="Starbucks", xlab="Weekly Returns")
abline(v=mean(Sr), col="orange")
plot(density(SPr), main="SPDR S&P 500 ETF", xlab="Weekly Returns")
abline(v=mean(SPr), col="orange")			#pdf file
graphics.off()


###########################################################################
library(quantmod)
###########################################################################

assets <- getSymbols(c("DIS", "AMD", "MSFT", "SIRI", "VXX", "PFE", "XOM", "IBB", "BA", "SBUX", "GS", "HSBC", "GE", "KO", "PM", "XME", "QQQ", "TM", "SPY", "IWO", "BK", "PHO", "TBF", "GOOG", "PG", "SWHC", "VWO", "IYR", "RS", "TRI", "AVA", "DJCO", "CS"), from="2010-01-01", to="2013-06-30")

# Creating a portfolio
# prices are coalated with a column bind of adjusted prices and returns 
# are calculated using a 'for loop'
prices = cbind(Ad(DIS),Ad(AMD),Ad(MSFT),Ad(SIRI),Ad(VXX),Ad(PFE),Ad(XOM),Ad(IBB),Ad(BA),Ad(SBUX),Ad(GS),Ad(HSBC),Ad(GE),Ad(KO),Ad(PM),Ad(XME),Ad(QQQ),Ad(TM),Ad(SPY),Ad(IWO),Ad(BK),Ad(PHO),Ad(TBF),Ad(GOOG),Ad(PG),Ad(SWHC),Ad(VWO),Ad(IYR),Ad(RS),Ad(TRI),Ad(AVA),Ad(DJCO),Ad(CS))
r = prices
names(r) = assets
for(i in 1:ncol(prices)) {
	r[,i] <- Delt(prices[,i])	
}
r <- r[-1]						# Delete the NA entries

par(mfrow=c(3,4))				# Using a loop to plot
for(i in 1:12){
	plot(density(r[,i]), main=paste(names(r[,i])), xlab = "Daily Returns")
	abline(v=mean(r[,i]), col="darkolivegreen")
}
graphics.off()

distr <- function(x)			# Creating your own function
{
	plot(density(x), main=paste(names(x)), xlab = "Daily Returns");
	abline(v=mean(x), col="chocolate");
}

par(mfrow=c(3,4))
lapply(r[,1:12], distr)
graphics.off()

target = 0.2/252				# 20% annual return divided by trading days
(1+target)^252-1				# EAR
avR <- matrix(colMeans(r), nrow=1)
COV <- cov(r)					# Covariance matrix of returns

# install.packages('tseries')
library(tseries)				# Another good package
solution = portfolio.optim(x=avR, pm=target, covmat=COV, shorts=TRUE)

Security = c("Disney", "Advanced Micro Devices", "Microsoft", "Sirius", "Volatility Index","Pfizer", "Exxon Mobil", "iShares NASDAQ Biotech Fund","Boeing", "Starbucks", "Goldman Sachs", "HSBC", "General Electric", "Coca-Cola", "Phillip Morris", "SPDR Metal & Mining ETF", "QQQ", "Toyota", "SPDR", "Russel 2000 Growth", "Burger King", "Proshares Water Resource Portfolio", "Proshares 20 Year T.Bill", "Google", "Proctor & Gamble", "Smith & Wesson", "Vanguard Emerging Markets ETF", "iShares Dow Jones US Real Estate ETF", "Reliance Steel & Aluminum", "Thomson Reuters", "Avista", "Daily Journal","Credit Suisse")	
# Optimal weights
Weight = solution$pw
rbind(Security, Weight)			# Row bind
cbind(Security, Weight)			# Column bind
Weight%*%COV%*%Weight			# Portfolio variance
sqrt(Weight%*%COV%*%Weight)		# Portfolio standard error
solution$pm						# Portfolio expected return
avR%*%Weight	
target; 						# Compare to our target return

# Using loops to compute & store the std dev of each column
SD = matrix(0, nrow=1, ncol=ncol(r))
for(i in 1:ncol(r)){
	SD[,i] <- sd(r[,i])
}

SD = matrix(0, nrow=1, ncol=ncol(r))
i=1
while(i <= ncol(r)){
	SD[,i] <- sd(r[,i]);
	i = i + 1;
}								# These 2 loops are equivalent

rbind(Security,SD)
cbind(Security,t(SD))			# t() transposes 'SD'
								# i.e. converts row to column & vice versa
StdDev = t(SD)		
ExpRet = t(avR)
Sharpe = ExpRet/StdDev			# if the risk free rate = 0					
data.frame(StdDev, ExpRet, Sharpe, row.names=Security)
				
par(mfrow=c(1,2))
barplot(SD, horiz=TRUE, col=topo.colors(ncol(SD)), border="black", main="Volatilities", xaxt="null")
axis(1, at=pretty(SD), lab=paste0(pretty(SD) * 100, " %"))
abline(v=as.numeric(sqrt(Weight%*%COV%*%Weight)), col="red", lwd=3/2)
text(as.numeric(sqrt(Weight%*%COV%*%Weight)), 0, "Portfolio Volatility", font=2, pos=4)
barplot(avR, horiz=TRUE, col=heat.colors(ncol(avR)), border="black", names.arg=Security, cex.names=3/4, las=2, main="Expected Returns", xaxt="null")
box()
axis(1, at=pretty(avR), lab=paste0(pretty(avR) * 100, " %"))
abline(v=as.numeric(avR%*%Weight), col="blue")
text(as.numeric(avR%*%Weight), 0, "Portfolio Return", font=2, pos=2)
graphics.off()

# install.packages('PerformanceAnalytics')
library(PerformanceAnalytics)

chart.RiskReturnScatter(r, Rf=0, symbolset=19, add.sharpe = c(1,2))
graphics.off()

chart.Histogram(r$TM, methods=c("add.density","add.normal","add.qqplot"), main="Daily Toyota Returns", cex.main=3/2)
graphics.off()


###########################################################################
# install.packages('fPortfolio')
library(fPortfolio)

r = as.timeSeries(r)
maxratioPortfolio(r, spec=portfolioSpec(), constraints="LongOnly")
tangencyPortfolio(r, spec=portfolioSpec(), constraints="LongOnly")

Frontier = portfolioFrontier(r)
frontierPlot(Frontier, frontier="both")
minvariancePoints(Frontier, return="mean", risk="Sigma", pch=10, col="navy")
tangencyLines(Frontier, lwd=3/2, col="green4")
tangencyPoints(Frontier, pch=10, col="red2")
singleAssetPoints(Frontier, pch=19, col=topo.colors(ncol(r)))

# Restart R if you need to. The packages below don't seem to run well with the ones used earlier.

# install.packages(c("reshape2","ggplot2","stockPortfolio","corrplot"))
library(reshape2); library(ggplot2); library(stockPortfolio); library(corrplot);
returns = getReturns(c("JNJ", "WFC", "VXX", "AAPL", "TGT", "IBM", "BBY", "MMM", "AA", "SBUX", "SPY", "DJIA"), freq="week", start="2010-01-01", end=NULL)
names(returns)

model = stockModel(returns)
optimalPort(model)
portReturn(model, optimalPort(model)$X)
# Second argument is the weights of each asset

portPossCurve(model, effFrontier=TRUE, main="Efficient Frontier", col="blue3", lwd=2)
portCloud(model)

# Got this from economistatlarge.com
CM <- cov(returns$R, method="kendall")
CORm <- cov2cor(CM)

ealred <- "#7D110C"			# Creating a color palette
ealtan <- "#CDC4B6"
eallighttan <- "#F7F6F0"
ealdark <- "#423C30"
col1 <- colorRampPalette(c(ealtan, ealred))

corrplot(CORm, method="shade", bg=eallighttan, addCoef.col="white", addCoefasPercent=FALSE, tl.col=ealdark, tl.srt=45, col=col1(4), mar=c(0,1,2,2), tl.offset=0.2, tl.cex=1, type="upper")
mtext("Correlation Table", side=4, font=3, cex=3/2)


############################################################################
### Some nice websites for reference 
# www.inside-r.org
# economistatlarge.com
# statmethods.net
# stackoverflow.com

